package io.loqr.sdk.samples;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import java.util.Hashtable;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import io.loqr.sdk.*;
import io.loqr.sdk.exceptions.LoqrSDKException;
import io.loqr.sdk.models.PairedDevice;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import org.json.JSONObject;

/**
 * A sample on how to use Loqr's Java SDK
 *
 * @author hs@loqr.io
 */
public class MainJFrame extends javax.swing.JFrame implements OnReceivedData {

    //BEGIN OF CLIENT CONFIGURATION
    private static final boolean USE_CONFIG_VALUES = false; //Set this to true if you wish to initialize your GUI with the config values below
    private static final String API_KEY = "YOUR_KEY_KEY"; //Your API KEY
    private static final String API_ID = "YOUR_API_ID"; //Your API_ID
    private static final String DOMAIN = "YOUR_DOMAIN"; //Your Domain
    //END OF CLIENT CONFIGURATION

    //BEGIN OF LOQR'S API CONFIGURATION
    //DON'T TOUCH THESE UNLESS YOU KNOWN WHAT YOU'RE DOING!
    private static final String BASE_URL = "https://loqr-prod-rest.azurewebsites.net";
    //END OF LOQR'S API CONFIGURATION

    //These variables will hold the current paired device and the current authentication process
    private PairedDevice pairedDevice;
    private Authentication authentication;
    private Timer timer = new Timer();
    private TimerTask task;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        //Initializes demo with config values
        if (USE_CONFIG_VALUES) {
            textFieldApiKey.setText(API_KEY);
            textFieldApiId.setText(API_ID);
            textFieldDomain.setText(DOMAIN);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAuthWithQRCode = new javax.swing.JButton();
        buttonPairDevice = new javax.swing.JButton();
        buttonAuthWithPush = new javax.swing.JButton();
        labelQRCode = new javax.swing.JLabel();
        textFieldDomain = new javax.swing.JTextField();
        labelDomain = new javax.swing.JLabel();
        labelApiKey = new javax.swing.JLabel();
        labelApiId = new javax.swing.JLabel();
        textFieldApiKey = new javax.swing.JTextField();
        textFieldApiId = new javax.swing.JTextField();
        labelDevicePairedId = new javax.swing.JLabel();
        buttonOfflineAuthentication = new javax.swing.JButton();
        jSliderPushSecLev = new javax.swing.JSlider(javax.swing.JSlider.HORIZONTAL,0,3,0);
        jLabelPushNotificationSecLev = new javax.swing.JLabel();
        buttonAbortQRCode = new javax.swing.JButton();
        labelExpiresQRCode = new javax.swing.JLabel();
        labelExpiresPush = new javax.swing.JLabel();
        buttonAbortPush = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Loqr SDK v3.0.0 Sample");
        setAutoRequestFocus(false);
        setPreferredSize(new java.awt.Dimension(800, 568));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 568));

        buttonAuthWithQRCode.setText("QRCode Authentication");
        buttonAuthWithQRCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAuthWithQRCodeActionPerformed(evt);
            }
        });

        buttonPairDevice.setText("Pair Device");
        buttonPairDevice.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonPairDevice.setMargin(new java.awt.Insets(0, 0, 0, 0));
        buttonPairDevice.setMaximumSize(new java.awt.Dimension(137, 19));
        buttonPairDevice.setMinimumSize(new java.awt.Dimension(57, 2));
        buttonPairDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPairDeviceActionPerformed(evt);
            }
        });

        buttonAuthWithPush.setText("Push Notification Authentication");
        buttonAuthWithPush.setEnabled(false);
        buttonAuthWithPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAuthWithPushActionPerformed(evt);
            }
        });

        labelQRCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //labelQRCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/loqr/sdk/samples/images/loqr_logo.png"))); // NOI18N
        labelQRCode.setAlignmentY(0.0F);
        labelQRCode.setMaximumSize(new java.awt.Dimension(300, 0));
        labelQRCode.setMinimumSize(new java.awt.Dimension(300, 0));

        textFieldDomain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldDomainActionPerformed(evt);
            }
        });

        labelDomain.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelDomain.setText("DOMAIN");

        labelApiKey.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelApiKey.setText("API KEY");

        labelApiId.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelApiId.setText("API ID");

        textFieldApiKey.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        textFieldApiKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldApiKeyActionPerformed(evt);
            }
        });

        labelDevicePairedId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //labelDevicePairedId.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/loqr/sdk/samples/images/cellphone.png"))); // NOI18N
        labelDevicePairedId.setText("Paired Device: None");

        buttonOfflineAuthentication.setText("Offline Authentication");
        buttonOfflineAuthentication.setEnabled(false);
        buttonOfflineAuthentication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOfflineAuthenticationActionPerformed(evt);
            }
        });

        jSliderPushSecLev.setEnabled(false);

        //jLabelPushNotificationSecLev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/loqr/sdk/samples/images/trusted.png"))); // NOI18N
        jLabelPushNotificationSecLev.setText("Push Notification Security Level");
        jLabelPushNotificationSecLev.setEnabled(false);

        buttonAbortQRCode.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        buttonAbortQRCode.setText("Abort");
        buttonAbortQRCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAbortQRCodeActionPerformed(evt);
            }
        });

        labelExpiresQRCode.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        labelExpiresQRCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        //labelExpiresQRCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/loqr/sdk/samples/images/clock.png"))); // NOI18N
        labelExpiresQRCode.setLabelFor(buttonAbortQRCode);
        labelExpiresQRCode.setText("Expires in 2:59");
        labelExpiresQRCode.setToolTipText("");

        labelExpiresPush.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        //labelExpiresPush.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/loqr/sdk/samples/images/clock.png"))); // NOI18N
        labelExpiresPush.setLabelFor(buttonAbortPush);
        labelExpiresPush.setText("Expires in 2:59");

        buttonAbortPush.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        buttonAbortPush.setText("Abort");
        buttonAbortPush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAbortPushActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(87, 87, 87)
                        .add(labelDomain)
                        .add(229, 229, 229)
                        .add(labelApiKey)
                        .add(0, 0, Short.MAX_VALUE)
                        .add(labelApiId)
                        .add(111, 111, 111))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(buttonAuthWithQRCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(57, 57, 57)
                                        .add(buttonOfflineAuthentication, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(0, 0, Short.MAX_VALUE)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, labelDevicePairedId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 300, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                                .add(buttonPairDevice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(33, 33, 33)))
                                        .add(30, 30, 30)))
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonAuthWithPush, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                            .add(jSliderPushSecLev, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(jLabelPushNotificationSecLev))
                                        .add(12, 12, 12))))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, labelQRCode, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(textFieldDomain, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(44, 44, 44)
                        .add(textFieldApiKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 32, Short.MAX_VALUE)
                        .add(textFieldApiId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(filler2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(labelExpiresPush)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(buttonAbortPush)
                                .add(42, 42, 42))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(labelExpiresQRCode)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(buttonAbortQRCode)
                                .add(292, 292, 292)
                                .add(filler3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelApiId)
                    .add(labelApiKey)
                    .add(labelDomain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(0, 0, 0)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textFieldDomain, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textFieldApiKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textFieldApiId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(labelExpiresQRCode)
                        .add(buttonAbortQRCode))
                    .add(filler3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(0, 0, 0)
                .add(labelQRCode, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 318, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(labelExpiresPush)
                        .add(buttonAbortPush, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(filler2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(labelDevicePairedId)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonPairDevice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 65, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(buttonAuthWithQRCode)
                            .add(buttonAuthWithPush)
                            .add(buttonOfflineAuthentication))
                        .add(10, 10, 10))
                    .add(layout.createSequentialGroup()
                        .add(jLabelPushNotificationSecLev)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSliderPushSecLev, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        labelQRCode.getAccessibleContext().setAccessibleDescription("");
        jSliderPushSecLev.setMajorTickSpacing(1);
        jSliderPushSecLev.setMinorTickSpacing(1);
        jSliderPushSecLev.setPaintTicks(true);
        jSliderPushSecLev.setSnapToTicks(true);
        Hashtable labelTable = new Hashtable();
        labelTable.put( new Integer( 0 ), new javax.swing.JLabel("Def.") );
        labelTable.put( new Integer( 1 ), new javax.swing.JLabel("Pin") );
        labelTable.put( new Integer( 2 ), new javax.swing.JLabel("OTP") );
        labelTable.put( new Integer( 3 ), new javax.swing.JLabel("Bio") );
        jSliderPushSecLev.setLabelTable( labelTable );
        jSliderPushSecLev.setPaintLabels(true);
        //jLabelPushNotificationSecLev.setIcon(new ImageIcon((Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/trusted.png")))));
        setQRCodeCountDownVisibility(false);
        labelExpiresPush.setVisible(false);
        buttonAbortPush.setVisible(false);

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This code will run when you press the "Authenticate with QRCode" button
     */
    private void buttonAuthWithQRCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAuthWithQRCodeActionPerformed

        if (isApiAuthParametersFilled() && isDomainFieldFilled()) {
            try {
                //Instantiates a new authentication process
                authentication = new QRCodeAuthentication(BASE_URL, textFieldApiKey.getText(), textFieldApiId.getText(), this, labelDomain.getText());             
                //Starts the process by getting the data to encode into the QRCode from the authentication process
                String qrCodeData=((QRCodeAuthentication) authentication).getQRCodeData();
                //Encodes the data into a QRCode bitmap and then displays it to the user
                labelQRCode.setIcon(new ImageIcon(createQRImage(qrCodeData)));
                
                //GUI manipulation
                hideReceivedData();
                startQRCodeCountDown();
                setQRCodeCountDownVisibility(true);
            } catch (LoqrSDKException | WriterException ex) {
                displayErrorDialog("Error!", ex.getMessage());
            }
        }


    }//GEN-LAST:event_buttonAuthWithQRCodeActionPerformed

    /**
     * This code will run when you press the "Pair New Device" button
     */
    private void buttonPairDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPairDeviceActionPerformed

        if (isApiAuthParametersFilled()) {
            try {
                //Instantiates a new authentication process
                authentication = new DevicePairing(BASE_URL, textFieldApiKey.getText(), textFieldApiId.getText(), this);
                 //Starts the process by getting the data to encode into the QRCode from the authentication process
                String qrCodeData = ((DevicePairing) authentication).getQRCodeData();
                //Encodes the data into a QRCode bitmap and then displays it to the user
                labelQRCode.setIcon(new ImageIcon(createQRImage(qrCodeData)));
                
                //GUI manipulation
                hideReceivedData();
                startQRCodeCountDown();
            } catch (LoqrSDKException | WriterException ex) {
                displayErrorDialog("Error!", ex.getMessage());
            }
        }
    }//GEN-LAST:event_buttonPairDeviceActionPerformed

    /**
     * This code will run when you press the "Authenticate with Push
     * Notification" button
     */
    private void buttonAuthWithPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAuthWithPushActionPerformed

        
        if (isApiAuthParametersFilled() && isDomainFieldFilled() && hasPairedDevice()) {
            try {
                //Checks which security level was selected by the user
                switch (jSliderPushSecLev.getValue()) {
                    case 1:
                        //Instantiates a new authentication process
                        authentication = new PushNotificationPinAuthentication(BASE_URL, textFieldApiKey.getText(), textFieldApiId.getText(), this, textFieldDomain.getText(), pairedDevice.getPublicKey());
                        //Starts the process by sending the push to the paired device
                        ((PushNotificationPinAuthentication) authentication).sendPush();
                        //Starts the 3:00 minute GUI countdown
                        startPushCountDown();
                        break;
                    case 2:
                        //Instantiates a new authentication process
                        authentication = new PushNotificationOtpAuthentication(BASE_URL, textFieldApiKey.getText(), textFieldApiId.getText(), this, textFieldDomain.getText(), pairedDevice.getPublicKey(), pairedDevice.getOtpSecret());
                        //Starts the process by sending the push to the paired device
                        ((PushNotificationAuthentication) authentication).sendPush();
                        //Starts the 3:00 minute GUI countdown
                        startPushCountDown();
                        break;
                    case 3:
                        //Informs the user that the feature is under development
                        displayInformationDialog("Coming soon", "This feature is under development!");
                        break;
                    default:
                        //Instantiates a new authentication process
                        authentication = new PushNotificationDefaultAuthentication(BASE_URL, textFieldApiKey.getText(), textFieldApiId.getText(), this, textFieldDomain.getText(), pairedDevice.getPublicKey());
                        //Starts the process by sending the push to the paired device
                        ((PushNotificationAuthentication) authentication).sendPush();
                        //Starts the 3:00 minute GUI countdown
                        startPushCountDown();
                }
            } catch (LoqrSDKException ex) {
                displayErrorDialog("Error!", ex.getMessage());
            }
    }//GEN-LAST:event_buttonAuthWithPushActionPerformed
    }
    private void textFieldDomainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldDomainActionPerformed
        // TODO add your handling code here
    }//GEN-LAST:event_textFieldDomainActionPerformed

    private void textFieldApiKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldApiKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldApiKeyActionPerformed

    private void buttonOfflineAuthenticationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOfflineAuthenticationActionPerformed
        JPanel panel = new JPanel();
        JPasswordField jPasswordFieldOtpCode = new JPasswordField(6);
        panel.add(new JLabel("Please enter your OTP code: "));
        panel.add(jPasswordFieldOtpCode);
        String[] options = new String[]{"OK", "Cancel"};
        int option = JOptionPane.showOptionDialog(  null, 
                                                    panel, 
                                                    "OTP Code Input", 
                                                    JOptionPane.OK_CANCEL_OPTION, 
                                                    JOptionPane.PLAIN_MESSAGE,
                                                    //new ImageIcon((Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/code.png"))))
                                                    null,
                                                    options, 
                                                    options[0]);
        
        if (option == 0) {
            //Gets the OTP Code inserted by the user
            String otpCode = new String(jPasswordFieldOtpCode.getPassword());

            if (otpCode.matches("^\\d{6,6}$")) { //Checks if the OTP Code matches the expected pattern for an OTP Code
                //if (new OfflineAuthentication(otpCode, pairedDevice.getOtpSecret()).isValid()) //Checks whether the OTP Code is valid
                    //labelQRCode.setIcon(new ImageIcon((Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/allowed.png")))));
                //else
                    //labelQRCode.setIcon(new ImageIcon((Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/not_allowed.png")))));
                hideReceivedData();
            } else {
                displayErrorDialog("Invalid OTP Code", "The provided OTP code is not valid!");
            }
        }


    }//GEN-LAST:event_buttonOfflineAuthenticationActionPerformed

    private void buttonAbortQRCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAbortQRCodeActionPerformed
        //Aborts the authentication process
        authentication.abort();
        
        //GUI manipulation
        setQRCodeCountDownVisibility(false);
        showLoqrLogo();
    }//GEN-LAST:event_buttonAbortQRCodeActionPerformed

    private void buttonAbortPushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAbortPushActionPerformed
        //Aborts the authentication process
        authentication.abort();
        //GUI manipulation
        setPushCountDownVisibility(false);
    }//GEN-LAST:event_buttonAbortPushActionPerformed

    /**
     * This method centers the window frame on the screen
     *
     * @param frame The window to center on the screen
     */
    public static void centerWindow(Window frame) {
        Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainJFrame main = new MainJFrame();
                main.setVisible(true);
                //Center the new window on screen
                centerWindow(main);
            }
        });

    }

    /**
     * This method generates a new QRCode image You can use any library you
     * want, we use Google's Zxing as an example
     *
     * @param qrCodeText The text to encode in the QRCode
     * @param size The width of the jLabel or jFrame where the QRCode is going
     * to be injected
     * @return BufferedImage The QRCode image
     * @throws WriterException Exception which may occur when encoding the
     * QRCode
     */
    private static BufferedImage createQRImage(String qrCodeText) throws WriterException {
        // Create the ByteMatrix for the QR-Code that encodes the given String
        Hashtable hintMap = new Hashtable();
        hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
        hintMap.put(EncodeHintType.CHARACTER_SET, "UTF-8");
        hintMap.put(EncodeHintType.MARGIN, -1);
        BitMatrix byteMatrix = new QRCodeWriter().encode(qrCodeText, BarcodeFormat.QR_CODE, 300, 300, hintMap);
        int matrixWidth = byteMatrix.getWidth();
        BufferedImage image = new BufferedImage(matrixWidth, matrixWidth, BufferedImage.TYPE_INT_ARGB);

        Graphics2D graphics = (Graphics2D) image.getGraphics();

        graphics.fillRect(0, 0, matrixWidth, matrixWidth);
        graphics.setColor(Color.BLACK);

        for (int i = 0; i < matrixWidth; i++) {
            for (int j = 0; j < matrixWidth; j++) {
                if (byteMatrix.get(i, j)) {
                    graphics.fillRect(i, j, 1, 1);
                }
            }
        }
        return image;
    }

    @Override
    public void dataReceived(String originLocalId, JSONObject data) {
        
        //Ignores the received data if the data does not belong to the
        //current authentication process
        if(!authentication.isLocalId(originLocalId))
            return;
        
        hideImage();
        setQRCodeCountDownVisibility(false);
        setPushCountDownVisibility(false);
        if (data.has("pk") && data.has("deviceModel") && data.has("sotp") && data.has("deviceBrand") && data.has("deviceName")) {
            //Sets the paired device
            pairedDevice = new PairedDevice(data.getString("pk"), data.getString("sotp"), data.getString("deviceModel"), data.getString("deviceBrand"), data.getString("deviceName"));
            //Update the currently paired device info
            labelDevicePairedId.setText("Paired Device: " + pairedDevice.getManufacturer().toUpperCase() + " " + pairedDevice.getModel().toUpperCase());
            enablePairedFeaturesDisablePairDevice();
        }
        labelQRCode.setIcon(null);
        labelQRCode.setText(jsonToHtmlString(data));
    }

    private void enablePairedFeaturesDisablePairDevice() {
        //Enable the "Push Notification Authentication" button
        buttonAuthWithPush.setEnabled(true);
        jSliderPushSecLev.setEnabled(true);
        jLabelPushNotificationSecLev.setEnabled(true);
        buttonOfflineAuthentication.setEnabled(true);
        //Disable the "Pair New Device" button
        buttonPairDevice.setEnabled(false);
    }

    private String jsonToHtmlString(JSONObject data) {

        String output = "<html><body><p style=\"text-align:center;\"><b>Received Data:</b><br>{<br>";
        String current;

        Iterator<String> iterator = data.keys();

        while (iterator.hasNext()) {
            current = iterator.next();
            output += "\"" + current + "\": \"" + data.get(current).toString() + "\"<br>";
        }

        return output + "}</p></body></html>";
    }

    /**
     * Checks if the "Domain" Field is filled
     *
     * @return True if it is, false if it ain't
     */
    private boolean isDomainFieldFilled() {
        if (textFieldDomain.getText().isEmpty() || textFieldDomain.getText().trim().equals("")) {
            //Tells user to insert a domain
            displayMessage("Please Insert a Domain");
            return false;
        }
        return true;
    }

    /**
     * Checks if the "API Key" and "API Id" fields are filled
     *
     * @return True if they are, false if they aren't
     */
    private boolean isApiAuthParametersFilled() {
        if (textFieldApiKey.getText().isEmpty() || textFieldApiKey.getText().trim().equals("")) {
            //Tells user to insert his API Key
            displayMessage("Please Insert Your API Key");
            return false;
        } else if (textFieldApiId.getText().isEmpty() || textFieldApiId.getText().trim().equals("")) {
            //Tells user to insert his API Id 
            displayMessage("Please Insert Your API Id");
            return false;
        }
        return true;
    }

    /**
     * Checks if there's a paired device
     *
     * @return True there is, false if there isn't
     */
    private boolean hasPairedDevice() {
        return pairedDevice != null;
    }

    private void displayErrorDialog(String dialogTitle, String message) {
        displayMessageDialog(dialogTitle, message, JOptionPane.ERROR_MESSAGE);
    }

    private void displayInformationDialog(String dialogTitle, String message) {
        displayMessageDialog(dialogTitle, message, JOptionPane.INFORMATION_MESSAGE);
    }

    private void displayMessage(String message) {
        JOptionPane.showMessageDialog(new JFrame(), message);
    }

    private void displayMessageDialog(String dialogTitle, String message, int messageType) {
        JOptionPane.showMessageDialog(new JFrame(), message, dialogTitle, messageType);
    }

    private void hideReceivedData() {
        labelQRCode.setText("");
    }

    private void hideImage() {
        labelQRCode.setIcon(null);
    }
    
    private void setQRCodeCountDownVisibility(boolean visible){
        buttonAbortQRCode.setVisible(visible);
        labelExpiresQRCode.setVisible(visible);
    }
    
    private void setPushCountDownVisibility(boolean visible){
        buttonAbortPush.setVisible(visible);
        labelExpiresPush.setVisible(visible);
    }
    
    private void showLoqrLogo(){
        labelQRCode.setText("");
//        labelQRCode.setIcon(new ImageIcon((Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/loqr_logo.png")))));
    }
    
    private void startQRCodeCountDown(){
        setQRCodeCountDownVisibility(true);
        startCountDown(labelExpiresQRCode);
    }
    
    private void startPushCountDown(){
        setPushCountDownVisibility(true);
        startCountDown(labelExpiresPush);
    }
    
    private void startCountDown(JLabel timerLabel) {
        if (task != null)
            task.cancel();

        task = getNewTimerTask(timerLabel);
        timer.schedule(task, 0, 1000);
    }
    
    private TimerTask getNewTimerTask(JLabel timerLabel){
        return new TimerTask(){
            int secondsLeft = (3*60)-1;
            @Override
            public void run() {
                if(secondsLeft>0){
                    timerLabel.setText("Expires in " + String.format("%d:%02d", secondsLeft/60, secondsLeft%60));
                    secondsLeft--;
                } else {
                    setQRCodeCountDownVisibility(false);
                    setPushCountDownVisibility(false);
                    showLoqrLogo();
                    this.cancel();
                }
            } }; 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAbortPush;
    private javax.swing.JButton buttonAbortQRCode;
    private javax.swing.JButton buttonAuthWithPush;
    private javax.swing.JButton buttonAuthWithQRCode;
    private javax.swing.JButton buttonOfflineAuthentication;
    private javax.swing.JButton buttonPairDevice;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JLabel jLabelPushNotificationSecLev;
    private javax.swing.JSlider jSliderPushSecLev;
    private javax.swing.JLabel labelApiId;
    private javax.swing.JLabel labelApiKey;
    private javax.swing.JLabel labelDevicePairedId;
    private javax.swing.JLabel labelDomain;
    private javax.swing.JLabel labelExpiresPush;
    private javax.swing.JLabel labelExpiresQRCode;
    private javax.swing.JLabel labelQRCode;
    private javax.swing.JTextField textFieldApiId;
    private javax.swing.JTextField textFieldApiKey;
    private javax.swing.JTextField textFieldDomain;
    // End of variables declaration//GEN-END:variables

    
}
